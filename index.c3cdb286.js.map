{"mappings":"AAAAA,eAAeC,EAAQC,GAQnB,aAPuBC,MAAMD,EAAK,CAC9BE,OAAQ,MACRC,QAAS,CACL,eAAgB,oBAEpBC,SAAU,YAEEC,MACpB,CAEOP,eAAeQ,EAAcC,GAChC,MAAMC,QAAiBT,EAAQ,8CAA8CQ,KAC7E,GAAIC,GAAgC,IAApBA,EAASC,OACrB,MAAMC,MAAM,oBAEhB,OAAOF,CACX,CAEOV,eAAea,EAAiBC,GACnC,MAAMJ,QAAiBT,EAAQ,gDAAgDa,KAC/E,GAAIJ,GAAYA,EAASK,MACrB,MAAM,IAAIH,MAAMF,EAASK,MAAMC,SAEnC,OAAON,CACX,CCvBA,MAAMO,EAAqB,iBACrBC,EAAyB,cACzBC,EAAoB,gBAGpBC,EAAUC,SAASC,eAAe,WAClCC,EAAeF,SAASC,eAAe,gBACvCE,EAAgBH,SAASC,eAAe,iBACxCG,EAAUJ,SAASC,eAAe,WAClCI,EAAQL,SAASC,eAAe,SAErC,WAwBG,SAASK,EAAeC,GACpB,KAAOA,EAAUC,YACbD,EAAUE,YAAYF,EAAUC,WAExC,CAEA,SAASE,EAAcC,GACnB,MAAMC,EAAS,GACf,GAAIC,aAAavB,QAAU,EACvB,MAAO,GAEX,IACI,IAAK,IAAIwB,EAAI,EAAGA,EAAID,aAAavB,OAAQwB,IAAK,CAC1C,MAAMC,EAAMF,aAAaE,IAAID,GAC7B,GAAIC,IAAQnB,GAAsBmB,IAAQjB,GAAqBiB,IAAQlB,EAAwB,CAC3F,MAAMmB,EAAQC,KAAKC,MAAML,aAAaM,QAAQJ,IAChC,IAAIK,OAAOT,EAAIU,eACnBC,KAAKN,EAAMO,WAAWF,gBAC5BT,EAAOY,KAAKR,EAEpB,CACJ,CAGJ,CAFE,MAAOS,GACLpB,EAAMqB,UAAY,uCACtB,CAEA,OAAOd,CACX,CAEA,SAASe,EAAkBlC,GACvB,IAAK,IAAIqB,EAAI,EAAGA,EAAID,aAAavB,OAAQwB,IAAK,CAC1C,MAAMC,EAAMF,aAAaE,IAAID,GAC7B,GAAIC,IAAQnB,GAAsBmB,IAAQjB,GAAqBiB,IAAQlB,EAAwB,CAE3F,GADcoB,KAAKC,MAAML,aAAaM,QAAQJ,IACpCa,UAAYnC,EAClB,OAAO,CAEf,CACJ,CACA,OAAO,CACX,CA8BA,SAASoC,EAAmBC,GACxB,MAAMC,EAAQC,OAAOnB,aAAaM,QAAQrB,IAC1C,GAAIiC,GAASD,GAASC,EAClB,MAAM,IAAIE,WAAW,kBAEzB,MAAMC,EAASF,OAAOnB,aAAaM,QAAQvB,IACrCuC,EAAMH,OAAOnB,aAAaM,QAAQtB,IACxC,IAAIuC,EAAYF,EAAS,EAAIJ,EAI7B,OAHIM,EAAY,IACZA,GAAaD,GAEVlB,KAAKC,MAAML,aAAaM,QAAQiB,GAC3C,CAMA,SAASC,EAAkBC,GAEvB,IAAKC,MAAMC,QAAQF,GACf,MAAM,IAAIG,UAAU,gBAExB,GAAqB,IAAjBH,EAAMhD,OAAV,CAGAgB,EAAeJ,GACf,IAAK,IAAIY,EAAI,EAAGA,EAAIwB,EAAMhD,UAClBwB,GATkB,IAQQA,IAAK,CAInC,MAAM4B,EAAOC,EAA2BL,EAAMxB,IAC9CZ,EAAa0C,YAAYF,EAC7B,CACAxC,EAAa2C,UAAUC,IAAI,4BAVvB,CAWR,CAEAnE,eAAeoE,EAAYtD,GACvB,MAAMuD,QAAgBxD,EAAiBC,GAGvC,OAFAa,EAAeH,GACfA,EAAcyC,YAqClB,SAA2BI,GAEvB,MAAMzC,EAAYP,SAASiD,cAAc,OACzC1C,EAAUsC,UAAUC,IAAI,WAExB,MAAMI,EAAQlD,SAASiD,cAAc,MACrCC,EAAML,UAAUC,IAAI,UAAW,mBAC/BI,EAAMxB,UAAYsB,EAAQzB,WAC1BhB,EAAUqC,YAAYM,GAEtB,MAAMC,EAAiBnD,SAASiD,cAAc,OAC9CE,EAAeN,UAAUC,IAAI,4BAC7B,MAAMM,EAAQpD,SAASiD,cAAc,OACrCG,EAAMC,IAAML,EAAQM,SACpBF,EAAMG,IAAM,cACZJ,EAAeP,YAAYQ,GAC3B7C,EAAUqC,YAAYO,GAEtB,MAAMK,EAAOxD,SAASiD,cAAc,OAQpC,OAPAO,EAAKX,UAAUC,IAAI,iBACnBU,EAAK9B,UAAY,+BAA+BsB,EAAQS,OAAOC,KAAK,YACpEF,EAAK9B,WAAa,qCAAqCsB,EAAQW,mBAC/DH,EAAK9B,WAAa,uCAAuCsB,EAAQY,oBACjEJ,EAAK9B,WAAa,iCAAiCsB,EAAQa,eAC3DtD,EAAUqC,YAAYY,GAEfjD,CACX,CAhE8BuD,CAAkBd,IACrCA,CACX,CAEA,SAASe,IACL,MAAMC,EA9BChC,OAAOnB,aAAaM,QAAQrB,IA+BnC,GAAqB,IAAjBkE,EACA,OAGJ,IACI5D,EAAQyC,UAAUoB,OAAO,gBACzB3D,EAAeF,GACf,MAAM8C,EAAQlD,SAASiD,cAAc,MACrCC,EAAML,UAAUC,IAAI,UAAW,mBAC/BI,EAAMgB,YAAc,kBACpB9D,EAAQwC,YAAYM,GACpB,IAAK,IAAIpC,EAAI,EAAGA,EARc,KAStBA,GAAKkD,GADkClD,IAAK,CAIhD,MAAMqD,EAAOtC,EAAmBf,GAC1BsD,EAAOpE,SAASiD,cAAc,KACpCmB,EAAKC,KAAO,IACZD,EAAKF,YAAcC,EAAK5C,WACxB6C,EAAKE,QAAU3F,MAAO4F,IAClBA,EAAMC,iBACNzE,EAAQiB,MAAQ,SACV+B,EAAYoB,EAAKvC,QAAO,EAElCxB,EAAQwC,YAAYwB,EACxB,CAGJ,CAFE,MAAO3C,GACLpB,EAAMqB,UAAY,uCACtB,CACJ,CA+BA,SAASiB,EAA2BwB,GAChC,MAAMM,EAAOzE,SAASiD,cAAc,OACpCwB,EAAK5B,UAAUC,IAAI,4BACfqB,EAAKO,WACLD,EAAK5B,UAAUC,IAAI,oCAEvB2B,EAAK/C,UAAYyC,EAAK5C,WACtB,MAAMP,EAAQhB,SAASiD,cAAc,SAYrC,OAXAjC,EAAM2D,KAAO,SACb3D,EAAMA,MAAQmD,EAAKvC,QACnB6C,EAAK7B,YAAY5B,GACjByD,EAAKG,iBAAiB,SAAS,KAC3B,MAAMnF,EAAKgF,EAAKI,qBAAqB,SAAS,GAAG7D,MACjDjB,EAAQiB,MAAQvB,EASxBd,eAA8Bc,GAC1B,KA7JJ,SAAuBA,EAAIyD,GACvB,IAAIhB,EAASF,OAAOnB,aAAaM,QAAQvB,IACrCmC,EAAQC,OAAOnB,aAAaM,QAAQrB,IACxC,MAAMqC,EAAMH,OAAOnB,aAAaM,QAAQtB,IAExC,IAAI8B,EAAkBlC,GAItB,IACIoB,aAAaiE,QACT5C,EACAjB,KAAK8D,UAAU,CACXnD,QAASnC,EACT8B,WAAY2B,KAGpBhB,GAAUA,EAAS,GAAKC,EACpBJ,EAAQI,IACRJ,GAAS,EACTlB,aAAaiE,QAAQhF,EAAmBiC,IAE5ClB,aAAaiE,QAAQlF,EAAoBsC,EAG7C,CAFE,MAAOT,GACLpB,EAAMqB,UAAY,uCACtB,CACJ,CAsIQsD,CAAcvF,SAFQsD,EAAYtD,IAER8B,YAE1BwC,GAGJ,CAFE,MAAOtC,GACLpB,EAAMqB,UAAY,2CACtB,CACJ,CAlBQuD,CAAexF,GACfa,EAAeJ,GACfA,EAAa2C,UAAUoB,OAAO,gCAG3BQ,CACX,CA1NI5D,aAAavB,OAAS,EACtByE,IAEA3D,EAAQyC,UAAUC,IAAI,gBAIrBjC,aAAaM,QAAQvB,IACtBiB,aAAaiE,QAAQlF,EAAoB,GAExCiB,aAAaM,QAAQtB,IACtBgB,aAAaiE,QAAQjF,EArBF,KAuBlBgB,aAAaM,QAAQrB,IACtBe,aAAaiE,QAAQhF,EAAmB,GAI5CoF,OAAON,iBAAiB,WAAW,KAC/Bb,GAAA,IAqNJhE,EAAQ6E,iBAAiB,SAASjG,MAAO4F,IACrC,MACMvD,EAAQuD,EAAMY,OAAOnE,MAC3B,KAAIA,EAAM1B,OAFe,GAKzB,IACI,MAAM6E,QAAahF,EAAc6B,GAE3BoE,EAAmB1E,EAAcM,GAAOqE,KAAKZ,IAAU,IAAKA,EAAMC,WAAW,MAInFrC,EAHoB+C,EAAiBE,OACjCnB,EAAKoB,QAAQd,IAAU9C,EAAkB8C,EAAK7C,WAAUyD,KAAKZ,IAAU,IAAKA,EAAMC,WAAW,OAKrG,CAFE,MAAOjD,GACLpB,EAAMqB,UAAY,2CACtB,KAGJ3B,EAAQ6E,iBAAiB,SAAUL,IAC/B,IACI,MAAMvD,EAAQuD,EAAMY,OAAOnE,MAC3B,GAAc,KAAVA,EAAc,CAEdqB,EADyB3B,EAAcM,GAAOqE,KAAKZ,IAAU,IAAKA,EAAMC,WAAW,MAEvF,CAGJ,CAFE,MAAOjD,GACLpB,EAAMqB,UAAY,2CACtB,KAGJ1B,SAAS4E,iBAAiB,SAAUL,IAC5BA,EAAMY,SAAWpF,IAGrBO,EAAeJ,GACfA,EAAa2C,UAAUoB,OAAO,gCAEtC,EAhRC","sources":["api.js","index.js"],"sourcesContent":["async function getData(url) {\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        redirect: 'follow',\n    });\n    return response.json();\n}\n\nexport async function loadAnimeList(name) {\n    const response = await getData(`https://gogoanime.consumet.org/search?keyw=${name}`);\n    if (response && response.length === 0) {\n        throw Error('request is wrong');\n    }\n    return response;\n}\n\nexport async function loadAnimeDetails(id) {\n    const response = await getData(`https://gogoanime.consumet.org/anime-details/${id}`);\n    if (response && response.error) {\n        throw new Error(response.error.message);\n    }\n    return response;\n}\n","import { loadAnimeList, loadAnimeDetails } from '/api.js';\n\nconst HISTORY_CURSOR_KEY = 'history_cursor';\nconst HISTORY_MAX_LENGTH_KEY = 'history_max';\nconst HISTORY_COUNT_KEY = 'history_count';\nconst HISTORY_MAX_LENGTH = 100;\n\nconst request = document.getElementById('request');\nconst searchResult = document.getElementById('searchResult');\nconst searchContent = document.getElementById('searchContent');\nconst history = document.getElementById('history');\nconst error = document.getElementById('error');\n\n(async () => {\n    // show history if not empty\n    if (localStorage.length > 3) {\n        createHistoryLinks();\n    } else {\n        history.classList.add('history_hide');\n    }\n\n    // save history parameters if not\n    if (!localStorage.getItem(HISTORY_CURSOR_KEY)) {\n        localStorage.setItem(HISTORY_CURSOR_KEY, 0);\n    }\n    if (!localStorage.getItem(HISTORY_MAX_LENGTH_KEY)) {\n        localStorage.setItem(HISTORY_MAX_LENGTH_KEY, HISTORY_MAX_LENGTH);\n    }\n    if (!localStorage.getItem(HISTORY_COUNT_KEY)) {\n        localStorage.setItem(HISTORY_COUNT_KEY, 0);\n    }\n\n    // listen to an event onstorage\n    window.addEventListener('storage', () => {\n        createHistoryLinks();\n    });\n\n    function clearContainer(container) {\n        while (container.firstChild) {\n            container.removeChild(container.firstChild);\n        }\n    }\n\n    function findInStorage(str) {\n        const result = [];\n        if (localStorage.length <= 3) {\n            return [];\n        }\n        try {\n            for (let i = 0; i < localStorage.length; i++) {\n                const key = localStorage.key(i);\n                if (key !== HISTORY_CURSOR_KEY && key !== HISTORY_COUNT_KEY && key !== HISTORY_MAX_LENGTH_KEY) {\n                    const value = JSON.parse(localStorage.getItem(key));\n                    const regex = new RegExp(str.toLowerCase());\n                    if (regex.test(value.animeTitle.toLowerCase())) {\n                        result.push(value);\n                    }\n                }\n            }\n        } catch (e) {\n            error.innerHTML = 'History error, please update the page';\n        }\n\n        return result;\n    }\n\n    function storageIncludesId(id) {\n        for (let i = 0; i < localStorage.length; i++) {\n            const key = localStorage.key(i);\n            if (key !== HISTORY_CURSOR_KEY && key !== HISTORY_COUNT_KEY && key !== HISTORY_MAX_LENGTH_KEY) {\n                const value = JSON.parse(localStorage.getItem(key));\n                if (value.animeId === id) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    function saveToStorage(id, title) {\n        let cursor = Number(localStorage.getItem(HISTORY_CURSOR_KEY));\n        let count = Number(localStorage.getItem(HISTORY_COUNT_KEY));\n        const max = Number(localStorage.getItem(HISTORY_MAX_LENGTH_KEY));\n        // find same animeId\n        if (storageIncludesId(id)) {\n            return;\n        }\n        // save if not find\n        try {\n            localStorage.setItem(\n                cursor,\n                JSON.stringify({\n                    animeId: id,\n                    animeTitle: title,\n                })\n            );\n            cursor = (cursor + 1) % max;\n            if (count < max) {\n                count += 1;\n                localStorage.setItem(HISTORY_COUNT_KEY, count);\n            }\n            localStorage.setItem(HISTORY_CURSOR_KEY, cursor);\n        } catch (e) {\n            error.innerHTML = 'History error, please update the page';\n        }\n    }\n\n    function getItemFromStorage(index) {\n        const count = Number(localStorage.getItem(HISTORY_COUNT_KEY));\n        if (count && index >= count) {\n            throw new RangeError('index very big');\n        }\n        const cursor = Number(localStorage.getItem(HISTORY_CURSOR_KEY));\n        const max = Number(localStorage.getItem(HISTORY_MAX_LENGTH_KEY));\n        let itemIndex = cursor - 1 - index;\n        if (itemIndex < 0) {\n            itemIndex += max;\n        }\n        return JSON.parse(localStorage.getItem(itemIndex));\n    }\n\n    function getStorageItemCount() {\n        return Number(localStorage.getItem(HISTORY_COUNT_KEY));\n    }\n\n    function showRequestResult(items) {\n        const MAX_COUNT_TO_SHOW = 10;\n        if (!Array.isArray(items)) {\n            throw new TypeError('is not array');\n        }\n        if (items.length === 0) {\n            return;\n        }\n        clearContainer(searchResult);\n        for (let i = 0; i < items.length; i++) {\n            if (i >= MAX_COUNT_TO_SHOW) {\n                break;\n            }\n            const node = createSearchResultItemNode(items[i]);\n            searchResult.appendChild(node);\n        }\n        searchResult.classList.add('search-line__result_shown');\n    }\n\n    async function showDetails(id) {\n        const details = await loadAnimeDetails(id);\n        clearContainer(searchContent);\n        searchContent.appendChild(createDetailsNode(details));\n        return details;\n    }\n\n    function createHistoryLinks() {\n        const historyCount = getStorageItemCount();\n        if (historyCount === 0) {\n            return;\n        }\n        const MAX_HISTORY_LIKNS_TO_SHOW = 3;\n        try {\n            history.classList.remove('history_hide');\n            clearContainer(history);\n            const title = document.createElement('h2');\n            title.classList.add('heading', 'heading_level-2');\n            title.textContent = 'Recent results:';\n            history.appendChild(title);\n            for (let i = 0; i < MAX_HISTORY_LIKNS_TO_SHOW; i++) {\n                if (i >= historyCount) {\n                    break;\n                }\n                const data = getItemFromStorage(i);\n                const link = document.createElement('a');\n                link.href = '#';\n                link.textContent = data.animeTitle;\n                link.onclick = async (event) => {\n                    event.preventDefault();\n                    request.value = '';\n                    await showDetails(data.animeId);\n                };\n                history.appendChild(link);\n            }\n        } catch (e) {\n            error.innerHTML = 'History error, please update the page';\n        }\n    }\n\n    function createDetailsNode(details) {\n        // create root node\n        const container = document.createElement('div');\n        container.classList.add('details');\n        // create title\n        const title = document.createElement('h2');\n        title.classList.add('heading', 'heading_level-2');\n        title.innerHTML = details.animeTitle;\n        container.appendChild(title);\n        // create image container with image\n        const imageContainer = document.createElement('div');\n        imageContainer.classList.add('details__image-container');\n        const image = document.createElement('img');\n        image.src = details.animeImg;\n        image.alt = 'anime image';\n        imageContainer.appendChild(image);\n        container.appendChild(imageContainer);\n        // create info container with info\n        const info = document.createElement('div');\n        info.classList.add('details__info');\n        info.innerHTML = `<p><strong>Genres: </strong>${details.genres.join(', ')}</p>`;\n        info.innerHTML += `<p><strong>Release date: </strong>${details.releasedDate}</p>`;\n        info.innerHTML += `<p><strong>Total episodes: </strong>${details.totalEpisodes}</p>`;\n        info.innerHTML += `<p><strong>Synopsis: </strong>${details.synopsis}</p>`;\n        container.appendChild(info);\n\n        return container;\n    }\n\n    function createSearchResultItemNode(data) {\n        const item = document.createElement('div');\n        item.classList.add('search-line__result-item');\n        if (data.isHistory) {\n            item.classList.add('search-line__result-item_history');\n        }\n        item.innerHTML = data.animeTitle;\n        const value = document.createElement('input');\n        value.type = 'hidden';\n        value.value = data.animeId;\n        item.appendChild(value);\n        item.addEventListener('click', () => {\n            const id = item.getElementsByTagName('input')[0].value;\n            request.value = id;\n            handleActiveId(id);\n            clearContainer(searchResult);\n            searchResult.classList.remove('search-line__result_shown');\n        });\n\n        return item;\n    }\n\n    async function handleActiveId(id) {\n        try {\n            const details = await showDetails(id);\n            // save to storage\n            saveToStorage(id, details.animeTitle);\n            // update the history links\n            createHistoryLinks();\n        } catch (e) {\n            error.innerHTML = 'Cant show details, please update the page';\n        }\n    }\n\n    request.addEventListener('input', async (event) => {\n        const MIN_QUERY_LENGTH = 2;\n        const value = event.target.value;\n        if (value.length < MIN_QUERY_LENGTH) {\n            return;\n        }\n        try {\n            const data = await loadAnimeList(value);\n            // get items from storage\n            const historyInStorage = findInStorage(value).map((item) => ({ ...item, isHistory: true }));\n            const itemsToShow = historyInStorage.concat(\n                data.filter((item) => !storageIncludesId(item.animeId)).map((item) => ({ ...item, isHistory: false }))\n            );\n            showRequestResult(itemsToShow);\n        } catch (e) {\n            error.innerHTML = 'Cant show results, please update the page';\n        }\n    });\n\n    request.addEventListener('focus', (event) => {\n        try {\n            const value = event.target.value;\n            if (value === '') {\n                const historyInStorage = findInStorage(value).map((item) => ({ ...item, isHistory: true }));\n                showRequestResult(historyInStorage);\n            }\n        } catch (e) {\n            error.innerHTML = 'Cant show results, please update the page';\n        }\n    });\n\n    document.addEventListener('click', (event) => {\n        if (event.target === request) {\n            return;\n        }\n        clearContainer(searchResult);\n        searchResult.classList.remove('search-line__result_shown');\n    });\n})();\n"],"names":["async","$19f3c469475076c6$var$getData","url","fetch","method","headers","redirect","json","$19f3c469475076c6$export$c601b24526f79fb4","name","response","length","Error","$19f3c469475076c6$export$3e292e52e0f8bd86","id","error","message","$dad545c909cfec2d$var$HISTORY_CURSOR_KEY","$dad545c909cfec2d$var$HISTORY_MAX_LENGTH_KEY","$dad545c909cfec2d$var$HISTORY_COUNT_KEY","$dad545c909cfec2d$var$request","document","getElementById","$dad545c909cfec2d$var$searchResult","$dad545c909cfec2d$var$searchContent","$dad545c909cfec2d$var$history","$dad545c909cfec2d$var$error","clearContainer","container","firstChild","removeChild","findInStorage","str","result","localStorage","i","key","value","JSON","parse","getItem","RegExp","toLowerCase","test","animeTitle","push","e","innerHTML","storageIncludesId","animeId","getItemFromStorage","index","count","Number","RangeError","cursor","max","itemIndex","showRequestResult","items","Array","isArray","TypeError","node","createSearchResultItemNode","appendChild","classList","add","showDetails","details","createElement","title","imageContainer","image","src","animeImg","alt","info","genres","join","releasedDate","totalEpisodes","synopsis","createDetailsNode","createHistoryLinks","historyCount","remove","textContent","data","link","href","onclick","event","preventDefault","item","isHistory","type","addEventListener","getElementsByTagName","setItem","stringify","saveToStorage","handleActiveId","window","target","historyInStorage","map","concat","filter"],"version":3,"file":"index.c3cdb286.js.map"}