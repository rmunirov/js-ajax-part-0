{"mappings":"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","sources":["api.js","utils.js","history.js","index.js"],"sourcesContent":["async function getData(url) {\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        redirect: 'follow',\n    });\n    return response.json();\n}\n\nexport async function loadAnimeList(name) {\n    const response = await getData(`https://gogoanime.consumet.org/search?keyw=${name}`);\n    if (response && response.length === 0) {\n        throw Error('request is wrong');\n    }\n    return response;\n}\n\nexport async function loadAnimeDetails(id) {\n    const response = await getData(`https://gogoanime.consumet.org/anime-details/${id}`);\n    if (response && response.error) {\n        throw new Error(response.error.message);\n    }\n    return response;\n}\n","export function debounce(func, timeoutMs) {\n    return function perform(...args) {\n        const prevCall = this.lastCall;\n        this.lastCall = Date.now();\n        if (prevCall && this.lastCall - prevCall <= timeoutMs) {\n            clearTimeout(this.timer);\n        }\n        this.timer = setTimeout(() => {\n            func(...args);\n        }, timeoutMs);\n    };\n}\n\nexport function clearHTMLContainer(container) {\n    while (container.firstChild) {\n        container.removeChild(container.firstChild);\n    }\n}\n","const HISTORY_CURSOR_KEY = 'history_cursor';\nconst HISTORY_MAX_LENGTH_KEY = 'history_max';\nconst HISTORY_COUNT_KEY = 'history_count';\nconst HISTORY_MAX_LENGTH = 100;\n\nfunction safeLocalStorageSet(key, value) {\n    try {\n        localStorage.setItem(key, value);\n    } catch (error) {\n        throw new Error('History error, please update the page');\n    }\n}\n\nexport function initHistory(callback) {\n    if (!localStorage.getItem(HISTORY_CURSOR_KEY)) {\n        safeLocalStorageSet(HISTORY_CURSOR_KEY, 0);\n    }\n    if (!localStorage.getItem(HISTORY_MAX_LENGTH_KEY)) {\n        safeLocalStorageSet(HISTORY_MAX_LENGTH_KEY, HISTORY_MAX_LENGTH);\n    }\n    if (!localStorage.getItem(HISTORY_COUNT_KEY)) {\n        safeLocalStorageSet(HISTORY_COUNT_KEY, 0);\n    }\n\n    // listen to an event onstorage\n    window.addEventListener('storage', () => {\n        callback();\n    });\n}\n\nexport function findInHistory(str) {\n    const result = [];\n    if (historyIsEmpty()) {\n        return [];\n    }\n    try {\n        for (let i = 0; i < localStorage.length; i++) {\n            const key = localStorage.key(i);\n            if (key !== HISTORY_CURSOR_KEY && key !== HISTORY_COUNT_KEY && key !== HISTORY_MAX_LENGTH_KEY) {\n                const value = JSON.parse(localStorage.getItem(key));\n                const regex = new RegExp(str.toLowerCase());\n                if (regex.test(value.animeTitle.toLowerCase())) {\n                    result.push(value);\n                }\n            }\n        }\n    } catch (e) {\n        throw new Error('History error, please update the page');\n    }\n\n    return result;\n}\n\nexport function historyIncludesId(id) {\n    try {\n        for (let i = 0; i < localStorage.length; i++) {\n            const key = localStorage.key(i);\n            if (key && key !== HISTORY_CURSOR_KEY && key !== HISTORY_COUNT_KEY && key !== HISTORY_MAX_LENGTH_KEY) {\n                const value = JSON.parse(localStorage.getItem(key));\n                if (value.animeId === id) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    } catch (error) {\n        throw new Error('History error, please update the page');\n    }\n}\n\nexport function saveToHistory(id, title) {\n    let cursor = Number(localStorage.getItem(HISTORY_CURSOR_KEY));\n    let count = Number(localStorage.getItem(HISTORY_COUNT_KEY));\n    const max = Number(localStorage.getItem(HISTORY_MAX_LENGTH_KEY));\n\n    if (!cursor || !count || !max) {\n        throw new Error('History error, please update the page');\n    }\n\n    // find same animeId\n    if (historyIncludesId(id)) {\n        return;\n    }\n    // save if not find\n    safeLocalStorageSet(\n        cursor,\n        JSON.stringify({\n            animeId: id,\n            animeTitle: title,\n        })\n    );\n    cursor = (cursor + 1) % max;\n    if (count < max) {\n        count += 1;\n        safeLocalStorageSet(HISTORY_COUNT_KEY, count);\n    }\n    safeLocalStorageSet(HISTORY_CURSOR_KEY, cursor);\n}\n\nexport function getFromHistory(index) {\n    try {\n        const count = Number(localStorage.getItem(HISTORY_COUNT_KEY));\n        if (count && index >= count) {\n            throw new RangeError('Passed index very big');\n        }\n        const cursor = Number(localStorage.getItem(HISTORY_CURSOR_KEY));\n        const max = Number(localStorage.getItem(HISTORY_MAX_LENGTH_KEY));\n        if (!cursor || !max) {\n            throw new Error('History error, please update the page');\n        }\n        let itemIndex = cursor - 1 - index;\n        if (itemIndex < 0) {\n            itemIndex += max;\n        }\n        return JSON.parse(localStorage.getItem(itemIndex));\n    } catch (error) {\n        if (error instanceof SyntaxError) {\n            throw new Error('History error, please update the page');\n        }\n        throw error;\n    }\n}\n\nexport function getHistoryItemsCount() {\n    return Number(localStorage.getItem(HISTORY_COUNT_KEY));\n}\n\nexport function historyIsEmpty() {\n    return localStorage.length <= 3;\n}\n","import { loadAnimeList, loadAnimeDetails } from '/api';\nimport { debounce, clearHTMLContainer } from '/utils';\nimport {\n    historyIsEmpty,\n    getHistoryItemsCount,\n    getFromHistory,\n    findInHistory,\n    saveToHistory,\n    historyIncludesId,\n    initHistory,\n} from '/history';\n\nconst request = document.getElementById('request');\nconst searchResult = document.getElementById('searchResult');\nconst searchContent = document.getElementById('searchContent');\nconst history = document.getElementById('history');\nconst error = document.getElementById('error');\n\n(async () => {\n    // init history\n    try {\n        initHistory(createHistoryLinks);\n    } catch (e) {\n        error.innerHTML = e.message;\n    }\n\n    // show history if not empty\n    if (!historyIsEmpty()) {\n        createHistoryLinks();\n    } else {\n        history.classList.add('history_hide');\n    }\n\n    function showRequestResult(items) {\n        const MAX_COUNT_TO_SHOW = 10;\n        if (!Array.isArray(items)) {\n            throw new TypeError('is not array');\n        }\n        if (items.length === 0) {\n            return;\n        }\n        clearHTMLContainer(searchResult);\n        for (let i = 0; i < items.length; i++) {\n            if (i >= MAX_COUNT_TO_SHOW) {\n                break;\n            }\n            const node = createSearchResultItemNode(items[i]);\n            searchResult.appendChild(node);\n        }\n        searchResult.classList.add('search-line__result_shown');\n    }\n\n    async function showDetails(id) {\n        const details = await loadAnimeDetails(id);\n        clearHTMLContainer(searchContent);\n        searchContent.appendChild(createDetailsNode(details));\n        return details;\n    }\n\n    function createHistoryLinks() {\n        const historyCount = getHistoryItemsCount();\n        if (historyCount === 0) {\n            return;\n        }\n        const MAX_HISTORY_LIKNS_TO_SHOW = 3;\n        try {\n            history.classList.remove('history_hide');\n            clearHTMLContainer(history);\n            const title = document.createElement('h2');\n            title.classList.add('heading', 'heading_level-2');\n            title.textContent = 'Recent results:';\n            history.appendChild(title);\n            for (let i = 0; i < MAX_HISTORY_LIKNS_TO_SHOW; i++) {\n                if (i >= historyCount) {\n                    break;\n                }\n                const data = getFromHistory(i);\n                const link = document.createElement('a');\n                link.href = '#';\n                link.textContent = data.animeTitle;\n                link.onclick = async (event) => {\n                    event.preventDefault();\n                    request.value = '';\n                    await showDetails(data.animeId);\n                };\n                history.appendChild(link);\n            }\n        } catch (e) {\n            error.innerHTML = e.message;\n        }\n    }\n\n    function createDetailsNode(details) {\n        // create root node\n        const container = document.createElement('div');\n        container.classList.add('details');\n        // create title\n        const title = document.createElement('h2');\n        title.classList.add('heading', 'heading_level-2');\n        title.innerHTML = details.animeTitle;\n        container.appendChild(title);\n        // create image container with image\n        const imageContainer = document.createElement('div');\n        imageContainer.classList.add('details__image-container');\n        const image = document.createElement('img');\n        image.src = details.animeImg;\n        image.alt = 'anime image';\n        imageContainer.appendChild(image);\n        container.appendChild(imageContainer);\n        // create info container with info\n        const info = document.createElement('div');\n        info.classList.add('details__info');\n        info.innerHTML = `<p><strong>Genres: </strong>${details.genres.join(', ')}</p>`;\n        info.innerHTML += `<p><strong>Release date: </strong>${details.releasedDate}</p>`;\n        info.innerHTML += `<p><strong>Total episodes: </strong>${details.totalEpisodes}</p>`;\n        info.innerHTML += `<p><strong>Synopsis: </strong>${details.synopsis}</p>`;\n        container.appendChild(info);\n\n        return container;\n    }\n\n    function createSearchResultItemNode(data) {\n        const item = document.createElement('div');\n        item.classList.add('search-line__result-item');\n        if (data.isHistory) {\n            item.classList.add('search-line__result-item_history');\n        }\n        item.innerHTML = data.animeTitle;\n        const value = document.createElement('input');\n        value.type = 'hidden';\n        value.value = data.animeId;\n        item.appendChild(value);\n        item.addEventListener('click', () => {\n            const id = item.getElementsByTagName('input')[0].value;\n            request.value = data.animeTitle;\n            handleActiveId(id);\n            clearHTMLContainer(searchResult);\n            searchResult.classList.remove('search-line__result_shown');\n        });\n\n        return item;\n    }\n\n    async function handleActiveId(id) {\n        try {\n            const details = await showDetails(id);\n            // save to storage\n            saveToHistory(id, details.animeTitle);\n            // update the history links\n            createHistoryLinks();\n        } catch (e) {\n            error.innerHTML = 'Cant show details, please update the page';\n        }\n    }\n\n    async function handleRequestInput(event) {\n        const MIN_QUERY_LENGTH = 2;\n        const MAX_HISTORY_ITEMS = 5;\n        const value = event.target.value;\n        if (value.length < MIN_QUERY_LENGTH) {\n            return;\n        }\n        try {\n            const data = await loadAnimeList(value);\n            // get items from storage\n            const historyInStorage = findInHistory(value)\n                .map((item) => ({ ...item, isHistory: true }))\n                .slice(0, MAX_HISTORY_ITEMS);\n            const itemsToShow = historyInStorage.concat(\n                data.filter((item) => !historyIncludesId(item.animeId)).map((item) => ({ ...item, isHistory: false }))\n            );\n            showRequestResult(itemsToShow);\n        } catch (e) {\n            error.innerHTML = 'Cant show results, please update the page';\n        }\n    }\n\n    function handleRequestFocus(event) {\n        try {\n            const value = event.target.value;\n            if (value === '') {\n                const historyInStorage = findInHistory(value).map((item) => ({ ...item, isHistory: true }));\n                showRequestResult(historyInStorage);\n            }\n        } catch (e) {\n            error.innerHTML = 'Cant show results, please update the page';\n        }\n    }\n\n    function handleDocumentClick(event) {\n        if (event.target === request) {\n            return;\n        }\n        clearHTMLContainer(searchResult);\n        searchResult.classList.remove('search-line__result_shown');\n    }\n\n    const debouncedHandleInput = debounce(handleRequestInput, 500);\n\n    request.addEventListener('input', debouncedHandleInput);\n\n    request.addEventListener('focus', handleRequestFocus);\n\n    document.addEventListener('click', handleDocumentClick);\n})();\n"],"names":["async","$19f3c469475076c6$var$getData","url","fetch","method","headers","redirect","json","$19f3c469475076c6$export$3e292e52e0f8bd86","id","response","error","Error","message","$9423fef94170f602$export$21aae2b728f22124","container","firstChild","removeChild","$4afa02b84cf25f73$var$HISTORY_CURSOR_KEY","$4afa02b84cf25f73$var$HISTORY_MAX_LENGTH_KEY","$4afa02b84cf25f73$var$HISTORY_COUNT_KEY","$4afa02b84cf25f73$var$safeLocalStorageSet","key","value","localStorage","setItem","$4afa02b84cf25f73$export$7acd3692152bd0b0","str","result","$4afa02b84cf25f73$export$a7294da69d890c18","i","length","JSON","parse","getItem","RegExp","toLowerCase","test","animeTitle","push","e","$4afa02b84cf25f73$export$7a2f0850fd500847","animeId","$4afa02b84cf25f73$export$c5dcb0c84a36a24a","title","cursor","Number","count","max","stringify","$4afa02b84cf25f73$export$65d56ad901ba4737","index","RangeError","itemIndex","SyntaxError","$dad545c909cfec2d$var$request","document","getElementById","$dad545c909cfec2d$var$searchResult","$dad545c909cfec2d$var$searchContent","$dad545c909cfec2d$var$history","$dad545c909cfec2d$var$error","callback","createHistoryLinks","window","addEventListener","innerHTML","showRequestResult","items","Array","isArray","TypeError","node","createSearchResultItemNode","appendChild","classList","add","showDetails","details","createElement","imageContainer","image","src","animeImg","alt","info","genres","join","releasedDate","totalEpisodes","synopsis","createDetailsNode","historyCount","remove","textContent","data","link","href","onclick","event","preventDefault","item","isHistory","type","getElementsByTagName","handleActiveId","debouncedHandleInput","func","target","name","historyInStorage","map","slice","concat","filter","timeoutMs","args","prevCall","this","lastCall","Date","now","clearTimeout","timer","setTimeout"],"version":3,"file":"index.e9fe0c5e.js.map"}